
led_driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000690  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000030  00800060  00000690  00000724  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00800090  00800090  00000754  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000754  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000784  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  000007c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fbd  00000000  00000000  000008f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000096a  00000000  00000000  000018ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000944  00000000  00000000  00002217  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002e4  00000000  00000000  00002b5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005cc  00000000  00000000  00002e40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a2c  00000000  00000000  0000340c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000140  00000000  00000000  00003e38  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	39 c2       	rjmp	.+1138   	; 0x47e <__vector_5>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_copy_data>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	e0 e9       	ldi	r30, 0x90	; 144
  32:	f6 e0       	ldi	r31, 0x06	; 6
  34:	02 c0       	rjmp	.+4      	; 0x3a <__do_copy_data+0x10>
  36:	05 90       	lpm	r0, Z+
  38:	0d 92       	st	X+, r0
  3a:	a0 39       	cpi	r26, 0x90	; 144
  3c:	b1 07       	cpc	r27, r17
  3e:	d9 f7       	brne	.-10     	; 0x36 <__do_copy_data+0xc>

00000040 <__do_clear_bss>:
  40:	20 e0       	ldi	r18, 0x00	; 0
  42:	a0 e9       	ldi	r26, 0x90	; 144
  44:	b0 e0       	ldi	r27, 0x00	; 0
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	ac 39       	cpi	r26, 0x9C	; 156
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	41 d1       	rcall	.+642    	; 0x2d4 <main>
  52:	1c c3       	rjmp	.+1592   	; 0x68c <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <adc_init>:

#include "adc.h"


void adc_init(void) {
	ADMUX =
  56:	80 e2       	ldi	r24, 0x20	; 32
  58:	87 b9       	out	0x07, r24	; 7
		| (0 << REFS0)		// (see above)
		| (1 << ADLAR)		// Set data register to left adjusted
		| (0b00 << MUX0)	// Enable ADC0 as single ended input
	;
	
	ADCSRA =
  5a:	87 e8       	ldi	r24, 0x87	; 135
  5c:	86 b9       	out	0x06, r24	; 6
		| (0 << ADATE)		// Disable auto trigger
		| (0 << ADIE)		// Disable adc conversion complete interrupt
		| (0b111 << ADPS0)	// Set prescaler division factor to 128
	;
	
	ADCSRB =
  5e:	13 b8       	out	0x03, r1	; 3
		  (0 << BIN)			// Disable bipolar input mode
		| (0 << IPR)			// Disable input polarity reversal
	;
	
	DIDR0 =				// Disable input buffer for all ADC
  60:	8c e3       	ldi	r24, 0x3C	; 60
  62:	84 bb       	out	0x14, r24	; 20
  64:	08 95       	ret

00000066 <adc_get_voltage>:

uint16_t adc_get_voltage(void) {
	uint32_t adcValue = 0;
	
	/* Enable ADC1 as single ended input */
	ADMUX = (ADMUX & ADC_MUX_MASK) | ADC_MUX_VOLTAGE;
  66:	87 b1       	in	r24, 0x07	; 7
  68:	80 7f       	andi	r24, 0xF0	; 240
  6a:	81 60       	ori	r24, 0x01	; 1
  6c:	87 b9       	out	0x07, r24	; 7
	
	/* Enable input buffer for ADC1 */
	DIDR0 &= ~(1 << ADC_VOLTAGE);
  6e:	a2 98       	cbi	0x14, 2	; 20
	
	/* Start the ADC */
	ADCSRA |= (1 << ADSC);
  70:	36 9a       	sbi	0x06, 6	; 6
	
	/* Wait for completion of conversion */
	while ( ADCSRA & (1 << ADSC) );
  72:	36 99       	sbic	0x06, 6	; 6
  74:	fe cf       	rjmp	.-4      	; 0x72 <adc_get_voltage+0xc>
	
	/* Read and store ADC */
	adcValue = ADCH;
  76:	85 b1       	in	r24, 0x05	; 5
	
	/* Disable input buffer for ADC1 */
	DIDR0 |= (1 << ADC_VOLTAGE);
  78:	a2 9a       	sbi	0x14, 2	; 20
	
	/* Wait for completion of conversion */
	while ( ADCSRA & (1 << ADSC) );
	
	/* Read and store ADC */
	adcValue = ADCH;
  7a:	90 e0       	ldi	r25, 0x00	; 0
  7c:	a0 e0       	ldi	r26, 0x00	; 0
  7e:	b0 e0       	ldi	r27, 0x00	; 0
	
	/* Disable input buffer for ADC1 */
	DIDR0 |= (1 << ADC_VOLTAGE);
	
	/* Calculate and return voltage */
	return (uint16_t)(adcValue * 5000 / 256);
  80:	88 0f       	add	r24, r24
  82:	99 1f       	adc	r25, r25
  84:	aa 1f       	adc	r26, r26
  86:	bb 1f       	adc	r27, r27
  88:	88 0f       	add	r24, r24
  8a:	99 1f       	adc	r25, r25
  8c:	aa 1f       	adc	r26, r26
  8e:	bb 1f       	adc	r27, r27
  90:	88 0f       	add	r24, r24
  92:	99 1f       	adc	r25, r25
  94:	aa 1f       	adc	r26, r26
  96:	bb 1f       	adc	r27, r27
  98:	ac 01       	movw	r20, r24
  9a:	bd 01       	movw	r22, r26
  9c:	44 0f       	add	r20, r20
  9e:	55 1f       	adc	r21, r21
  a0:	66 1f       	adc	r22, r22
  a2:	77 1f       	adc	r23, r23
  a4:	44 0f       	add	r20, r20
  a6:	55 1f       	adc	r21, r21
  a8:	66 1f       	adc	r22, r22
  aa:	77 1f       	adc	r23, r23
  ac:	84 0f       	add	r24, r20
  ae:	95 1f       	adc	r25, r21
  b0:	a6 1f       	adc	r26, r22
  b2:	b7 1f       	adc	r27, r23
  b4:	ac 01       	movw	r20, r24
  b6:	bd 01       	movw	r22, r26
  b8:	44 0f       	add	r20, r20
  ba:	55 1f       	adc	r21, r21
  bc:	66 1f       	adc	r22, r22
  be:	77 1f       	adc	r23, r23
  c0:	44 0f       	add	r20, r20
  c2:	55 1f       	adc	r21, r21
  c4:	66 1f       	adc	r22, r22
  c6:	77 1f       	adc	r23, r23
  c8:	84 0f       	add	r24, r20
  ca:	95 1f       	adc	r25, r21
  cc:	a6 1f       	adc	r26, r22
  ce:	b7 1f       	adc	r27, r23
  d0:	ac 01       	movw	r20, r24
  d2:	bd 01       	movw	r22, r26
  d4:	44 0f       	add	r20, r20
  d6:	55 1f       	adc	r21, r21
  d8:	66 1f       	adc	r22, r22
  da:	77 1f       	adc	r23, r23
  dc:	44 0f       	add	r20, r20
  de:	55 1f       	adc	r21, r21
  e0:	66 1f       	adc	r22, r22
  e2:	77 1f       	adc	r23, r23
  e4:	84 0f       	add	r24, r20
  e6:	95 1f       	adc	r25, r21
  e8:	a6 1f       	adc	r26, r22
  ea:	b7 1f       	adc	r27, r23
  ec:	ac 01       	movw	r20, r24
  ee:	bd 01       	movw	r22, r26
  f0:	44 0f       	add	r20, r20
  f2:	55 1f       	adc	r21, r21
  f4:	66 1f       	adc	r22, r22
  f6:	77 1f       	adc	r23, r23
  f8:	44 0f       	add	r20, r20
  fa:	55 1f       	adc	r21, r21
  fc:	66 1f       	adc	r22, r22
  fe:	77 1f       	adc	r23, r23
 100:	84 0f       	add	r24, r20
 102:	95 1f       	adc	r25, r21
 104:	a6 1f       	adc	r26, r22
 106:	b7 1f       	adc	r27, r23
 108:	89 2f       	mov	r24, r25
 10a:	9a 2f       	mov	r25, r26
 10c:	ab 2f       	mov	r26, r27
 10e:	bb 27       	eor	r27, r27
}
 110:	08 95       	ret

00000112 <adc_get_temperature>:

uint16_t adc_get_temperature(void) {
	uint32_t adcValue = 0;
	
	/* Enable ADC3 as single ended input */
	ADMUX = (ADMUX & ADC_MUX_MASK) | ADC_MUX_TEMPERATURE;
 112:	87 b1       	in	r24, 0x07	; 7
 114:	80 7f       	andi	r24, 0xF0	; 240
 116:	83 60       	ori	r24, 0x03	; 3
 118:	87 b9       	out	0x07, r24	; 7
	
	/* Enable input buffer for ADC3 */
	DIDR0 &= ~(1 << ADC_TEMPERATURE);
 11a:	a3 98       	cbi	0x14, 3	; 20
	
	/* Start the ADC */
	ADCSRA |= (1 << ADSC);
 11c:	36 9a       	sbi	0x06, 6	; 6
	
	/* Wait for completion of conversion */
	while ( ADCSRA & (1 << ADSC) );
 11e:	36 99       	sbic	0x06, 6	; 6
 120:	fe cf       	rjmp	.-4      	; 0x11e <adc_get_temperature+0xc>
	
	/* Read and store ADC */
	adcValue = ADCH;
 122:	85 b1       	in	r24, 0x05	; 5
	
	/* Disable input buffer for ADC3 */
	DIDR0 |= (1 << ADC_TEMPERATURE);
 124:	a3 9a       	sbi	0x14, 3	; 20
	
	/* Wait for completion of conversion */
	while ( ADCSRA & (1 << ADSC) );
	
	/* Read and store ADC */
	adcValue = ADCH;
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	a0 e0       	ldi	r26, 0x00	; 0
 12a:	b0 e0       	ldi	r27, 0x00	; 0
	
	/* Disable input buffer for ADC3 */
	DIDR0 |= (1 << ADC_TEMPERATURE);
	
	/* Calculate and return temperature */
	return (uint16_t)(adcValue * 5000 / 256);
 12c:	88 0f       	add	r24, r24
 12e:	99 1f       	adc	r25, r25
 130:	aa 1f       	adc	r26, r26
 132:	bb 1f       	adc	r27, r27
 134:	88 0f       	add	r24, r24
 136:	99 1f       	adc	r25, r25
 138:	aa 1f       	adc	r26, r26
 13a:	bb 1f       	adc	r27, r27
 13c:	88 0f       	add	r24, r24
 13e:	99 1f       	adc	r25, r25
 140:	aa 1f       	adc	r26, r26
 142:	bb 1f       	adc	r27, r27
 144:	ac 01       	movw	r20, r24
 146:	bd 01       	movw	r22, r26
 148:	44 0f       	add	r20, r20
 14a:	55 1f       	adc	r21, r21
 14c:	66 1f       	adc	r22, r22
 14e:	77 1f       	adc	r23, r23
 150:	44 0f       	add	r20, r20
 152:	55 1f       	adc	r21, r21
 154:	66 1f       	adc	r22, r22
 156:	77 1f       	adc	r23, r23
 158:	84 0f       	add	r24, r20
 15a:	95 1f       	adc	r25, r21
 15c:	a6 1f       	adc	r26, r22
 15e:	b7 1f       	adc	r27, r23
 160:	ac 01       	movw	r20, r24
 162:	bd 01       	movw	r22, r26
 164:	44 0f       	add	r20, r20
 166:	55 1f       	adc	r21, r21
 168:	66 1f       	adc	r22, r22
 16a:	77 1f       	adc	r23, r23
 16c:	44 0f       	add	r20, r20
 16e:	55 1f       	adc	r21, r21
 170:	66 1f       	adc	r22, r22
 172:	77 1f       	adc	r23, r23
 174:	84 0f       	add	r24, r20
 176:	95 1f       	adc	r25, r21
 178:	a6 1f       	adc	r26, r22
 17a:	b7 1f       	adc	r27, r23
 17c:	ac 01       	movw	r20, r24
 17e:	bd 01       	movw	r22, r26
 180:	44 0f       	add	r20, r20
 182:	55 1f       	adc	r21, r21
 184:	66 1f       	adc	r22, r22
 186:	77 1f       	adc	r23, r23
 188:	44 0f       	add	r20, r20
 18a:	55 1f       	adc	r21, r21
 18c:	66 1f       	adc	r22, r22
 18e:	77 1f       	adc	r23, r23
 190:	84 0f       	add	r24, r20
 192:	95 1f       	adc	r25, r21
 194:	a6 1f       	adc	r26, r22
 196:	b7 1f       	adc	r27, r23
 198:	ac 01       	movw	r20, r24
 19a:	bd 01       	movw	r22, r26
 19c:	44 0f       	add	r20, r20
 19e:	55 1f       	adc	r21, r21
 1a0:	66 1f       	adc	r22, r22
 1a2:	77 1f       	adc	r23, r23
 1a4:	44 0f       	add	r20, r20
 1a6:	55 1f       	adc	r21, r21
 1a8:	66 1f       	adc	r22, r22
 1aa:	77 1f       	adc	r23, r23
 1ac:	84 0f       	add	r24, r20
 1ae:	95 1f       	adc	r25, r21
 1b0:	a6 1f       	adc	r26, r22
 1b2:	b7 1f       	adc	r27, r23
 1b4:	89 2f       	mov	r24, r25
 1b6:	9a 2f       	mov	r25, r26
 1b8:	ab 2f       	mov	r26, r27
 1ba:	bb 27       	eor	r27, r27
 1bc:	08 95       	ret

000001be <hyst_check>:


int hyst_check(uint16_t value,
               uint16_t previous,
               struct Threshold hystTable[],
               uint8_t size) {
 1be:	cf 93       	push	r28
 1c0:	df 93       	push	r29
 1c2:	dc 01       	movw	r26, r24
    int i;
    int state = NO_STATE_CHANGE;

    if ( value >= previous ) {
 1c4:	86 17       	cp	r24, r22
 1c6:	97 07       	cpc	r25, r23
 1c8:	00 f1       	brcs	.+64     	; 0x20a <hyst_check+0x4c>
        for (i=0; i < size; i++) {
 1ca:	22 23       	and	r18, r18
 1cc:	09 f4       	brne	.+2      	; 0x1d0 <hyst_check+0x12>
 1ce:	3f c0       	rjmp	.+126    	; 0x24e <hyst_check+0x90>
 1d0:	fa 01       	movw	r30, r20
 1d2:	35 96       	adiw	r30, 0x05	; 5
 1d4:	82 2f       	mov	r24, r18
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	82 0f       	add	r24, r18
 1da:	91 1d       	adc	r25, r1
 1dc:	82 0f       	add	r24, r18
 1de:	91 1d       	adc	r25, r1
 1e0:	88 0f       	add	r24, r24
 1e2:	99 1f       	adc	r25, r25
 1e4:	05 96       	adiw	r24, 0x05	; 5
 1e6:	48 0f       	add	r20, r24
 1e8:	59 1f       	adc	r21, r25
 1ea:	8f ef       	ldi	r24, 0xFF	; 255
 1ec:	9f ef       	ldi	r25, 0xFF	; 255
 1ee:	ef 01       	movw	r28, r30
 1f0:	23 97       	sbiw	r28, 0x03	; 3
            if ( value >= hystTable[i].upper ) {
 1f2:	28 81       	ld	r18, Y
 1f4:	39 81       	ldd	r19, Y+1	; 0x01
 1f6:	a2 17       	cp	r26, r18
 1f8:	b3 07       	cpc	r27, r19
 1fa:	10 f0       	brcs	.+4      	; 0x200 <hyst_check+0x42>
                state = hystTable[i].ustate;
 1fc:	80 81       	ld	r24, Z
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	36 96       	adiw	r30, 0x06	; 6
               uint8_t size) {
    int i;
    int state = NO_STATE_CHANGE;

    if ( value >= previous ) {
        for (i=0; i < size; i++) {
 202:	e4 17       	cp	r30, r20
 204:	f5 07       	cpc	r31, r21
 206:	99 f7       	brne	.-26     	; 0x1ee <hyst_check+0x30>
 208:	27 c0       	rjmp	.+78     	; 0x258 <hyst_check+0x9a>
            if ( value >= hystTable[i].upper ) {
                state = hystTable[i].ustate;
            }
        }
    } else {
        for (i=(size-1); i >= 0; i--) {
 20a:	82 2f       	mov	r24, r18
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	01 97       	sbiw	r24, 0x01	; 1
 210:	0a f1       	brmi	.+66     	; 0x254 <hyst_check+0x96>
 212:	e2 2f       	mov	r30, r18
 214:	f0 e0       	ldi	r31, 0x00	; 0
 216:	e2 0f       	add	r30, r18
 218:	f1 1d       	adc	r31, r1
 21a:	e2 0f       	add	r30, r18
 21c:	f1 1d       	adc	r31, r1
 21e:	ee 0f       	add	r30, r30
 220:	ff 1f       	adc	r31, r31
 222:	32 97       	sbiw	r30, 0x02	; 2
 224:	e4 0f       	add	r30, r20
 226:	f5 1f       	adc	r31, r21
 228:	42 50       	subi	r20, 0x02	; 2
 22a:	51 09       	sbc	r21, r1
 22c:	8f ef       	ldi	r24, 0xFF	; 255
 22e:	9f ef       	ldi	r25, 0xFF	; 255
 230:	ef 01       	movw	r28, r30
 232:	24 97       	sbiw	r28, 0x04	; 4
            if ( value <= hystTable[i].lower ) {
 234:	28 81       	ld	r18, Y
 236:	39 81       	ldd	r19, Y+1	; 0x01
 238:	2a 17       	cp	r18, r26
 23a:	3b 07       	cpc	r19, r27
 23c:	18 f0       	brcs	.+6      	; 0x244 <hyst_check+0x86>
                state = hystTable[i].lstate;
 23e:	90 81       	ld	r25, Z
 240:	89 2f       	mov	r24, r25
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	36 97       	sbiw	r30, 0x06	; 6
            if ( value >= hystTable[i].upper ) {
                state = hystTable[i].ustate;
            }
        }
    } else {
        for (i=(size-1); i >= 0; i--) {
 246:	e4 17       	cp	r30, r20
 248:	f5 07       	cpc	r31, r21
 24a:	91 f7       	brne	.-28     	; 0x230 <hyst_check+0x72>
 24c:	05 c0       	rjmp	.+10     	; 0x258 <hyst_check+0x9a>
               uint8_t size) {
    int i;
    int state = NO_STATE_CHANGE;

    if ( value >= previous ) {
        for (i=0; i < size; i++) {
 24e:	8f ef       	ldi	r24, 0xFF	; 255
 250:	9f ef       	ldi	r25, 0xFF	; 255
 252:	02 c0       	rjmp	.+4      	; 0x258 <hyst_check+0x9a>
int hyst_check(uint16_t value,
               uint16_t previous,
               struct Threshold hystTable[],
               uint8_t size) {
    int i;
    int state = NO_STATE_CHANGE;
 254:	8f ef       	ldi	r24, 0xFF	; 255
 256:	9f ef       	ldi	r25, 0xFF	; 255
            }
        }
    }

    return state;
 258:	df 91       	pop	r29
 25a:	cf 91       	pop	r28
 25c:	08 95       	ret

0000025e <led_set_luminance>:
volatile uint8_t g_luminance = 0;
volatile uint8_t g_luminanceLimit = 10;


int led_set_luminance(uint8_t index) {
	if ( index >= LED_STEPS ) {
 25e:	8b 30       	cpi	r24, 0x0B	; 11
 260:	58 f4       	brcc	.+22     	; 0x278 <__stack+0x19>
		return -1;
	}
	
	g_luminance = index;
 262:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__data_end>
	pwm_set_duty(c_lightness[index]);
 266:	e8 2f       	mov	r30, r24
 268:	f0 e0       	ldi	r31, 0x00	; 0
 26a:	eb 57       	subi	r30, 0x7B	; 123
 26c:	ff 4f       	sbci	r31, 0xFF	; 255
 26e:	80 81       	ld	r24, Z
 270:	e1 d0       	rcall	.+450    	; 0x434 <pwm_set_duty>
	return 0;
 272:	80 e0       	ldi	r24, 0x00	; 0
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	08 95       	ret
volatile uint8_t g_luminanceLimit = 10;


int led_set_luminance(uint8_t index) {
	if ( index >= LED_STEPS ) {
		return -1;
 278:	8f ef       	ldi	r24, 0xFF	; 255
 27a:	9f ef       	ldi	r25, 0xFF	; 255
	}
	
	g_luminance = index;
	pwm_set_duty(c_lightness[index]);
	return 0;
}
 27c:	08 95       	ret

0000027e <led_set_luminance_limit>:

int led_set_luminance_limit(uint8_t index) {
	if ( index >= LED_STEPS ) {
 27e:	8b 30       	cpi	r24, 0x0B	; 11
 280:	28 f4       	brcc	.+10     	; 0x28c <led_set_luminance_limit+0xe>
		return -1;
	}
	g_luminanceLimit = index;
 282:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <g_luminanceLimit>
	return 0;
 286:	80 e0       	ldi	r24, 0x00	; 0
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	08 95       	ret
	return 0;
}

int led_set_luminance_limit(uint8_t index) {
	if ( index >= LED_STEPS ) {
		return -1;
 28c:	8f ef       	ldi	r24, 0xFF	; 255
 28e:	9f ef       	ldi	r25, 0xFF	; 255
	}
	g_luminanceLimit = index;
	return 0;
}
 290:	08 95       	ret

00000292 <led_increase>:

void led_increase(void) {
	int index = g_luminance;
 292:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__data_end>
 296:	90 e0       	ldi	r25, 0x00	; 0
	
	if ( ++index > g_luminanceLimit ) {
 298:	01 96       	adiw	r24, 0x01	; 1
 29a:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <g_luminanceLimit>
 29e:	30 e0       	ldi	r19, 0x00	; 0
 2a0:	28 17       	cp	r18, r24
 2a2:	39 07       	cpc	r19, r25
 2a4:	14 f4       	brge	.+4      	; 0x2aa <led_increase+0x18>
		index = g_luminanceLimit;
 2a6:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <g_luminanceLimit>
	}
	
	led_set_luminance(index);
 2aa:	d9 df       	rcall	.-78     	; 0x25e <led_set_luminance>
 2ac:	08 95       	ret

000002ae <led_decrease>:
}

void led_decrease(void) {
	int index = g_luminance;
 2ae:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__data_end>
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	01 97       	sbiw	r24, 0x01	; 1
 2b6:	12 f4       	brpl	.+4      	; 0x2bc <led_decrease+0xe>
 2b8:	80 e0       	ldi	r24, 0x00	; 0
 2ba:	90 e0       	ldi	r25, 0x00	; 0
	
	if ( --index < 0 ) {
		index = 0;
	}
	
	led_set_luminance(index);
 2bc:	d0 df       	rcall	.-96     	; 0x25e <led_set_luminance>
 2be:	08 95       	ret

000002c0 <led_check>:
}

void led_check(void) {
	if ( g_luminance > g_luminanceLimit ) {
 2c0:	90 91 90 00 	lds	r25, 0x0090	; 0x800090 <__data_end>
 2c4:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <g_luminanceLimit>
 2c8:	89 17       	cp	r24, r25
 2ca:	18 f4       	brcc	.+6      	; 0x2d2 <led_check+0x12>
		led_set_luminance(g_luminanceLimit);
 2cc:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <g_luminanceLimit>
 2d0:	c6 df       	rcall	.-116    	; 0x25e <led_set_luminance>
 2d2:	08 95       	ret

000002d4 <main>:
#include "hyst.h"



#if 1
int main(void) {
 2d4:	cf 93       	push	r28
 2d6:	df 93       	push	r29
 2d8:	00 d0       	rcall	.+0      	; 0x2da <main+0x6>
 2da:	cd b7       	in	r28, 0x3d	; 61
 2dc:	de b7       	in	r29, 0x3e	; 62
	volatile enum {NORMAL, STROBE} mode;
	volatile enum bool emergency;
	
	mode = NORMAL;
 2de:	19 82       	std	Y+1, r1	; 0x01
	emergency = FALSE;
 2e0:	1a 82       	std	Y+2, r1	; 0x02
	time_init();
 2e2:	c6 d0       	rcall	.+396    	; 0x470 <time_init>
	pwm_init();
 2e4:	9e d0       	rcall	.+316    	; 0x422 <pwm_init>
	adc_init();
 2e6:	b7 de       	rcall	.-658    	; 0x56 <adc_init>
	sei();
 2e8:	78 94       	sei
			}
		
			
			uint16_t vCurrent = 0;
			uint16_t vPrevious = 0;
			int vState = VOLT_STATE_100;
 2ea:	0f 2e       	mov	r0, r31
 2ec:	f3 e0       	ldi	r31, 0x03	; 3
 2ee:	af 2e       	mov	r10, r31
 2f0:	f0 2d       	mov	r31, r0
 2f2:	b1 2c       	mov	r11, r1
				else if ( UP == PRESSED ) {
					enum bool emergencyPressed = FALSE;
					while ( UP == PRESSED ) {
						if ( time_get_millis() - start > EMERGENCY_DELAY ) {
							emergencyPressed = TRUE;
							emergency = TRUE;
 2f4:	99 24       	eor	r9, r9
 2f6:	93 94       	inc	r9
    while (1) {
		
		/*
		 * NORMAL MODE
		*/
		if ( mode == NORMAL ) {
 2f8:	89 81       	ldd	r24, Y+1	; 0x01
 2fa:	81 11       	cpse	r24, r1
 2fc:	30 c0       	rjmp	.+96     	; 0x35e <main+0x8a>
			
			/* ======================== */
			if ( UP == PRESSED || DOWN == PRESSED ) {
 2fe:	b0 99       	sbic	0x16, 0	; 22
 300:	02 c0       	rjmp	.+4      	; 0x306 <main+0x32>
 302:	b1 9b       	sbis	0x16, 1	; 22
 304:	7c c0       	rjmp	.+248    	; 0x3fe <main+0x12a>
				uint32_t start = time_get_millis();
 306:	f9 d0       	rcall	.+498    	; 0x4fa <time_get_millis>
 308:	6b 01       	movw	r12, r22
 30a:	7c 01       	movw	r14, r24
				
				time_delay_millis(DEBOUNCE_DELAY);
 30c:	68 ec       	ldi	r22, 0xC8	; 200
 30e:	70 e0       	ldi	r23, 0x00	; 0
 310:	80 e0       	ldi	r24, 0x00	; 0
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	28 d1       	rcall	.+592    	; 0x566 <time_delay_millis>
				
				if ( UP == PRESSED && DOWN == PRESSED ) {
 316:	b0 9b       	sbis	0x16, 0	; 22
 318:	05 c0       	rjmp	.+10     	; 0x324 <main+0x50>
 31a:	b1 9b       	sbis	0x16, 1	; 22
 31c:	03 c0       	rjmp	.+6      	; 0x324 <main+0x50>
					mode = STROBE;
 31e:	99 82       	std	Y+1, r9	; 0x01
					pwm_strobe_on();
 320:	8b d0       	rcall	.+278    	; 0x438 <pwm_strobe_on>
 322:	6d c0       	rjmp	.+218    	; 0x3fe <main+0x12a>
				}
					
				else if ( UP == PRESSED ) {
 324:	b0 99       	sbic	0x16, 0	; 22
 326:	12 c0       	rjmp	.+36     	; 0x34c <main+0x78>
 328:	14 c0       	rjmp	.+40     	; 0x352 <main+0x7e>
					enum bool emergencyPressed = FALSE;
					while ( UP == PRESSED ) {
						if ( time_get_millis() - start > EMERGENCY_DELAY ) {
 32a:	e7 d0       	rcall	.+462    	; 0x4fa <time_get_millis>
 32c:	dc 01       	movw	r26, r24
 32e:	cb 01       	movw	r24, r22
 330:	8c 19       	sub	r24, r12
 332:	9d 09       	sbc	r25, r13
 334:	ae 09       	sbc	r26, r14
 336:	bf 09       	sbc	r27, r15
 338:	89 35       	cpi	r24, 0x59	; 89
 33a:	9b 41       	sbci	r25, 0x1B	; 27
 33c:	a1 05       	cpc	r26, r1
 33e:	b1 05       	cpc	r27, r1
 340:	28 f0       	brcs	.+10     	; 0x34c <main+0x78>
							emergencyPressed = TRUE;
							emergency = TRUE;
 342:	9a 82       	std	Y+2, r9	; 0x02
			* ======== ADC Readings =========
			* ===============================
		*/
		
		
		if ( emergency == FALSE ) {
 344:	8a 81       	ldd	r24, Y+2	; 0x02
 346:	88 23       	and	r24, r24
 348:	a9 f0       	breq	.+42     	; 0x374 <main+0xa0>
 34a:	54 c0       	rjmp	.+168    	; 0x3f4 <main+0x120>
					pwm_strobe_on();
				}
					
				else if ( UP == PRESSED ) {
					enum bool emergencyPressed = FALSE;
					while ( UP == PRESSED ) {
 34c:	b0 99       	sbic	0x16, 0	; 22
 34e:	ed cf       	rjmp	.-38     	; 0x32a <main+0x56>
 350:	55 c0       	rjmp	.+170    	; 0x3fc <main+0x128>
					if ( !emergencyPressed ) {
						led_increase();
					}
				}
					
				else if ( DOWN == PRESSED ) {
 352:	b1 9b       	sbis	0x16, 1	; 22
 354:	54 c0       	rjmp	.+168    	; 0x3fe <main+0x12a>
					while ( DOWN == PRESSED  );
 356:	b1 99       	sbic	0x16, 1	; 22
 358:	fe cf       	rjmp	.-4      	; 0x356 <main+0x82>
					led_decrease();
 35a:	a9 df       	rcall	.-174    	; 0x2ae <led_decrease>
 35c:	50 c0       	rjmp	.+160    	; 0x3fe <main+0x12a>
			
			
		/*
		 * STROBE MODE
		*/	
		else if ( mode == STROBE ) {
 35e:	89 81       	ldd	r24, Y+1	; 0x01
 360:	81 30       	cpi	r24, 0x01	; 1
 362:	09 f0       	breq	.+2      	; 0x366 <main+0x92>
 364:	4c c0       	rjmp	.+152    	; 0x3fe <main+0x12a>
			if ( UP == RELEASED && DOWN == RELEASED ) {
 366:	b0 99       	sbic	0x16, 0	; 22
 368:	4a c0       	rjmp	.+148    	; 0x3fe <main+0x12a>
 36a:	b1 99       	sbic	0x16, 1	; 22
 36c:	48 c0       	rjmp	.+144    	; 0x3fe <main+0x12a>
				pwm_strobe_off();
 36e:	76 d0       	rcall	.+236    	; 0x45c <pwm_strobe_off>
				mode = NORMAL;
 370:	19 82       	std	Y+1, r1	; 0x01
 372:	45 c0       	rjmp	.+138    	; 0x3fe <main+0x12a>
		
			for (i=0; i < (BUFFER_SIZE-1); i++) {
				temp[i] = temp[i+1];
				volt[i] = volt[i+1];
			}
			temp[BUFFER_SIZE-1] = adc_get_temperature();
 374:	ce de       	rcall	.-612    	; 0x112 <adc_get_temperature>
			volt[BUFFER_SIZE-1] = adc_get_voltage();
 376:	77 de       	rcall	.-786    	; 0x66 <adc_get_voltage>
			int tState = TEMP_STATE_100;
			int tStateCheck = NO_STATE_CHANGE;
		
			vPrevious = vCurrent;
			vCurrent = voltAverage;
			vStateCheck = hyst_check(vCurrent, vPrevious, g_voltageHystTable, 3);
 378:	23 e0       	ldi	r18, 0x03	; 3
 37a:	42 e7       	ldi	r20, 0x72	; 114
 37c:	50 e0       	ldi	r21, 0x00	; 0
 37e:	60 e0       	ldi	r22, 0x00	; 0
 380:	70 e0       	ldi	r23, 0x00	; 0
 382:	80 e0       	ldi	r24, 0x00	; 0
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	1b df       	rcall	.-458    	; 0x1be <hyst_check>
 388:	8c 01       	movw	r16, r24
			if ( vStateCheck != NO_STATE_CHANGE ) {
 38a:	0f 3f       	cpi	r16, 0xFF	; 255
 38c:	8f ef       	ldi	r24, 0xFF	; 255
 38e:	18 07       	cpc	r17, r24
 390:	d9 f1       	breq	.+118    	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
				vState = vStateCheck;
			}
			
			tPrevious = tCurrent;
			tCurrent = tempAverage;
			tStateCheck = hyst_check(tCurrent, tPrevious, g_temperatureHystTable, 3);
 392:	23 e0       	ldi	r18, 0x03	; 3
 394:	40 e6       	ldi	r20, 0x60	; 96
 396:	50 e0       	ldi	r21, 0x00	; 0
 398:	60 e0       	ldi	r22, 0x00	; 0
 39a:	70 e0       	ldi	r23, 0x00	; 0
 39c:	80 e0       	ldi	r24, 0x00	; 0
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	0e df       	rcall	.-484    	; 0x1be <hyst_check>
			if ( tStateCheck != NO_STATE_CHANGE ) {
 3a2:	8f 3f       	cpi	r24, 0xFF	; 255
 3a4:	2f ef       	ldi	r18, 0xFF	; 255
 3a6:	92 07       	cpc	r25, r18
 3a8:	31 f4       	brne	.+12     	; 0x3b6 <main+0xe2>
 3aa:	03 c0       	rjmp	.+6      	; 0x3b2 <main+0xde>
			}
		
			
			uint16_t vCurrent = 0;
			uint16_t vPrevious = 0;
			int vState = VOLT_STATE_100;
 3ac:	0a 2d       	mov	r16, r10
 3ae:	1b 2d       	mov	r17, r11
 3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <main+0xe2>
			int vStateCheck = NO_STATE_CHANGE;
			uint16_t tCurrent = 0;
			uint16_t tPrevious = 0;
			int tState = TEMP_STATE_100;
 3b2:	8a 2d       	mov	r24, r10
 3b4:	9b 2d       	mov	r25, r11
 3b6:	98 01       	movw	r18, r16
 3b8:	80 17       	cp	r24, r16
 3ba:	91 07       	cpc	r25, r17
 3bc:	0c f4       	brge	.+2      	; 0x3c0 <main+0xec>
 3be:	9c 01       	movw	r18, r24
				state = tState;
			} else {
				state = vState;
			}
		
			switch (state) {
 3c0:	21 30       	cpi	r18, 0x01	; 1
 3c2:	31 05       	cpc	r19, r1
 3c4:	71 f0       	breq	.+28     	; 0x3e2 <main+0x10e>
 3c6:	1c f4       	brge	.+6      	; 0x3ce <main+0xfa>
 3c8:	23 2b       	or	r18, r19
 3ca:	41 f0       	breq	.+16     	; 0x3dc <main+0x108>
 3cc:	15 c0       	rjmp	.+42     	; 0x3f8 <main+0x124>
 3ce:	22 30       	cpi	r18, 0x02	; 2
 3d0:	31 05       	cpc	r19, r1
 3d2:	51 f0       	breq	.+20     	; 0x3e8 <main+0x114>
 3d4:	23 30       	cpi	r18, 0x03	; 3
 3d6:	31 05       	cpc	r19, r1
 3d8:	51 f0       	breq	.+20     	; 0x3ee <main+0x11a>
 3da:	0e c0       	rjmp	.+28     	; 0x3f8 <main+0x124>
				case VOLT_STATE_OFF:
					led_set_luminance_limit(0);
 3dc:	80 e0       	ldi	r24, 0x00	; 0
 3de:	4f df       	rcall	.-354    	; 0x27e <led_set_luminance_limit>
					break;
 3e0:	0b c0       	rjmp	.+22     	; 0x3f8 <main+0x124>
				case VOLT_STATE_50:
					led_set_luminance_limit(5);
 3e2:	85 e0       	ldi	r24, 0x05	; 5
 3e4:	4c df       	rcall	.-360    	; 0x27e <led_set_luminance_limit>
					break;
 3e6:	08 c0       	rjmp	.+16     	; 0x3f8 <main+0x124>
				case VOLT_STATE_70:
					led_set_luminance_limit(7);
 3e8:	87 e0       	ldi	r24, 0x07	; 7
 3ea:	49 df       	rcall	.-366    	; 0x27e <led_set_luminance_limit>
					break;
 3ec:	05 c0       	rjmp	.+10     	; 0x3f8 <main+0x124>
				case VOLT_STATE_100:
					led_set_luminance_limit(10);
 3ee:	8a e0       	ldi	r24, 0x0A	; 10
 3f0:	46 df       	rcall	.-372    	; 0x27e <led_set_luminance_limit>
					break;
 3f2:	02 c0       	rjmp	.+4      	; 0x3f8 <main+0x124>
			}
			
		} else {
			led_set_luminance_limit(10);
 3f4:	8a e0       	ldi	r24, 0x0A	; 10
 3f6:	43 df       	rcall	.-378    	; 0x27e <led_set_luminance_limit>
		} // end: if ( luminance == FALSE )
		led_check();
 3f8:	63 df       	rcall	.-314    	; 0x2c0 <led_check>
    } // end: while (1)
 3fa:	7e cf       	rjmp	.-260    	; 0x2f8 <main+0x24>
							emergency = TRUE;
							break;
						}
					}
					if ( !emergencyPressed ) {
						led_increase();
 3fc:	4a df       	rcall	.-364    	; 0x292 <led_increase>
			* ======== ADC Readings =========
			* ===============================
		*/
		
		
		if ( emergency == FALSE ) {
 3fe:	8a 81       	ldd	r24, Y+2	; 0x02
 400:	88 23       	and	r24, r24
 402:	09 f4       	brne	.+2      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 404:	b7 cf       	rjmp	.-146    	; 0x374 <main+0xa0>
 406:	f6 cf       	rjmp	.-20     	; 0x3f4 <main+0x120>
				vState = vStateCheck;
			}
			
			tPrevious = tCurrent;
			tCurrent = tempAverage;
			tStateCheck = hyst_check(tCurrent, tPrevious, g_temperatureHystTable, 3);
 408:	23 e0       	ldi	r18, 0x03	; 3
 40a:	40 e6       	ldi	r20, 0x60	; 96
 40c:	50 e0       	ldi	r21, 0x00	; 0
 40e:	60 e0       	ldi	r22, 0x00	; 0
 410:	70 e0       	ldi	r23, 0x00	; 0
 412:	80 e0       	ldi	r24, 0x00	; 0
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	d3 de       	rcall	.-602    	; 0x1be <hyst_check>
			if ( tStateCheck != NO_STATE_CHANGE ) {
 418:	8f 3f       	cpi	r24, 0xFF	; 255
 41a:	2f ef       	ldi	r18, 0xFF	; 255
 41c:	92 07       	cpc	r25, r18
 41e:	31 f6       	brne	.-116    	; 0x3ac <main+0xd8>
 420:	e6 cf       	rjmp	.-52     	; 0x3ee <main+0x11a>

00000422 <pwm_init>:
volatile uint8_t g_OCR1B;


void pwm_init(void) {
	/* For the OC1B to work the corresponding I/O pin (PB4) must be set as a output. */
	DDRB |= (1 << PB4);
 422:	bc 9a       	sbi	0x17, 4	; 23
	
	/* Setting up the Timer to use OC1B */
	GTCCR =
 424:	80 e6       	ldi	r24, 0x60	; 96
 426:	8c bd       	out	0x2c, r24	; 44
		(0b10 << COM1B0)		// OC1B cleared on compare match. Set when TCNT1 = $00
		| (1 << PWM1B)			// Pulse Width Modulator B Enable
	;
	
	/* Set pwm frequency to ~300Hz */
	TCCR1 = (0b1000 << CS10);	// Set prescaler to	F_CPU/128
 428:	88 e0       	ldi	r24, 0x08	; 8
 42a:	80 bf       	out	0x30, r24	; 48
	OCR1C = _PWM_TOP;			// Set value on which to clear the counter
 42c:	86 ed       	ldi	r24, 0xD6	; 214
 42e:	8d bd       	out	0x2d, r24	; 45
	
	/* Set duty cycle to 0% */
	OCR1B = 0;
 430:	1b bc       	out	0x2b, r1	; 43
 432:	08 95       	ret

00000434 <pwm_set_duty>:
}

uint8_t pwm_set_duty(uint8_t duty) {
	OCR1B = duty;
 434:	8b bd       	out	0x2b, r24	; 43
}
 436:	08 95       	ret

00000438 <pwm_strobe_on>:

void pwm_strobe_on(void) {
	/* Save previous Timer1 settings to later restore them */
	g_TCCR1 = TCCR1;
 438:	80 b7       	in	r24, 0x30	; 48
 43a:	80 93 9b 00 	sts	0x009B, r24	; 0x80009b <g_TCCR1>
	g_OCR1C = OCR1C;
 43e:	8d b5       	in	r24, 0x2d	; 45
 440:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <g_OCR1C>
	g_OCR1B = OCR1B;
 444:	8b b5       	in	r24, 0x2b	; 43
 446:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <g_OCR1B>
	
	TCCR1 = (TCCR1 & 0b11110000) + 0b1110;	// Set prescaler to	F_CPU/8192
 44a:	80 b7       	in	r24, 0x30	; 48
 44c:	80 7f       	andi	r24, 0xF0	; 240
 44e:	82 5f       	subi	r24, 0xF2	; 242
 450:	80 bf       	out	0x30, r24	; 48
	
	OCR1C = 125;							// Set value on which to clear the counter, to alter the frequency
 452:	8d e7       	ldi	r24, 0x7D	; 125
 454:	8d bd       	out	0x2d, r24	; 45
	
	OCR1B = 62;								// Set duty cycle to ~50%
 456:	8e e3       	ldi	r24, 0x3E	; 62
 458:	8b bd       	out	0x2b, r24	; 43
 45a:	08 95       	ret

0000045c <pwm_strobe_off>:
}

void pwm_strobe_off(void) {
	/* Reset Timer1 settings saved in pwm_strobe_on() */
	TCCR1 = g_TCCR1;
 45c:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <g_TCCR1>
 460:	80 bf       	out	0x30, r24	; 48
	OCR1C = g_OCR1C;
 462:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <g_OCR1C>
 466:	8d bd       	out	0x2d, r24	; 45
	OCR1B = g_OCR1B;
 468:	80 91 99 00 	lds	r24, 0x0099	; 0x800099 <g_OCR1B>
 46c:	8b bd       	out	0x2b, r24	; 43
 46e:	08 95       	ret

00000470 <time_init>:
}

void time_delay_micros(uint64_t delay) {
	uint32_t start = time_get_micros();
	while ( time_get_micros() - start < delay);
}
 470:	1a bc       	out	0x2a, r1	; 42
 472:	82 e0       	ldi	r24, 0x02	; 2
 474:	83 bf       	out	0x33, r24	; 51
 476:	89 b7       	in	r24, 0x39	; 57
 478:	82 60       	ori	r24, 0x02	; 2
 47a:	89 bf       	out	0x39, r24	; 57
 47c:	08 95       	ret

0000047e <__vector_5>:
 47e:	1f 92       	push	r1
 480:	0f 92       	push	r0
 482:	0f b6       	in	r0, 0x3f	; 63
 484:	0f 92       	push	r0
 486:	11 24       	eor	r1, r1
 488:	2f 93       	push	r18
 48a:	3f 93       	push	r19
 48c:	4f 93       	push	r20
 48e:	5f 93       	push	r21
 490:	6f 93       	push	r22
 492:	7f 93       	push	r23
 494:	8f 93       	push	r24
 496:	9f 93       	push	r25
 498:	af 93       	push	r26
 49a:	20 91 91 00 	lds	r18, 0x0091	; 0x800091 <timer0OvfCounter>
 49e:	30 91 92 00 	lds	r19, 0x0092	; 0x800092 <timer0OvfCounter+0x1>
 4a2:	40 91 93 00 	lds	r20, 0x0093	; 0x800093 <timer0OvfCounter+0x2>
 4a6:	50 91 94 00 	lds	r21, 0x0094	; 0x800094 <timer0OvfCounter+0x3>
 4aa:	60 91 95 00 	lds	r22, 0x0095	; 0x800095 <timer0OvfCounter+0x4>
 4ae:	70 91 96 00 	lds	r23, 0x0096	; 0x800096 <timer0OvfCounter+0x5>
 4b2:	80 91 97 00 	lds	r24, 0x0097	; 0x800097 <timer0OvfCounter+0x6>
 4b6:	90 91 98 00 	lds	r25, 0x0098	; 0x800098 <timer0OvfCounter+0x7>
 4ba:	a1 e0       	ldi	r26, 0x01	; 1
 4bc:	db d0       	rcall	.+438    	; 0x674 <__adddi3_s8>
 4be:	20 93 91 00 	sts	0x0091, r18	; 0x800091 <timer0OvfCounter>
 4c2:	30 93 92 00 	sts	0x0092, r19	; 0x800092 <timer0OvfCounter+0x1>
 4c6:	40 93 93 00 	sts	0x0093, r20	; 0x800093 <timer0OvfCounter+0x2>
 4ca:	50 93 94 00 	sts	0x0094, r21	; 0x800094 <timer0OvfCounter+0x3>
 4ce:	60 93 95 00 	sts	0x0095, r22	; 0x800095 <timer0OvfCounter+0x4>
 4d2:	70 93 96 00 	sts	0x0096, r23	; 0x800096 <timer0OvfCounter+0x5>
 4d6:	80 93 97 00 	sts	0x0097, r24	; 0x800097 <timer0OvfCounter+0x6>
 4da:	90 93 98 00 	sts	0x0098, r25	; 0x800098 <timer0OvfCounter+0x7>
 4de:	af 91       	pop	r26
 4e0:	9f 91       	pop	r25
 4e2:	8f 91       	pop	r24
 4e4:	7f 91       	pop	r23
 4e6:	6f 91       	pop	r22
 4e8:	5f 91       	pop	r21
 4ea:	4f 91       	pop	r20
 4ec:	3f 91       	pop	r19
 4ee:	2f 91       	pop	r18
 4f0:	0f 90       	pop	r0
 4f2:	0f be       	out	0x3f, r0	; 63
 4f4:	0f 90       	pop	r0
 4f6:	1f 90       	pop	r1
 4f8:	18 95       	reti

000004fa <time_get_millis>:
 4fa:	af 92       	push	r10
 4fc:	bf 92       	push	r11
 4fe:	cf 92       	push	r12
 500:	df 92       	push	r13
 502:	ef 92       	push	r14
 504:	ff 92       	push	r15
 506:	0f 93       	push	r16
 508:	1f 93       	push	r17
 50a:	20 91 91 00 	lds	r18, 0x0091	; 0x800091 <timer0OvfCounter>
 50e:	30 91 92 00 	lds	r19, 0x0092	; 0x800092 <timer0OvfCounter+0x1>
 512:	40 91 93 00 	lds	r20, 0x0093	; 0x800093 <timer0OvfCounter+0x2>
 516:	50 91 94 00 	lds	r21, 0x0094	; 0x800094 <timer0OvfCounter+0x3>
 51a:	60 91 95 00 	lds	r22, 0x0095	; 0x800095 <timer0OvfCounter+0x4>
 51e:	70 91 96 00 	lds	r23, 0x0096	; 0x800096 <timer0OvfCounter+0x5>
 522:	80 91 97 00 	lds	r24, 0x0097	; 0x800097 <timer0OvfCounter+0x6>
 526:	90 91 98 00 	lds	r25, 0x0098	; 0x800098 <timer0OvfCounter+0x7>
 52a:	08 e0       	ldi	r16, 0x08	; 8
 52c:	8a d0       	rcall	.+276    	; 0x642 <__ashldi3>
 52e:	0f 2e       	mov	r0, r31
 530:	f8 ee       	ldi	r31, 0xE8	; 232
 532:	af 2e       	mov	r10, r31
 534:	f0 2d       	mov	r31, r0
 536:	0f 2e       	mov	r0, r31
 538:	f3 e0       	ldi	r31, 0x03	; 3
 53a:	bf 2e       	mov	r11, r31
 53c:	f0 2d       	mov	r31, r0
 53e:	c1 2c       	mov	r12, r1
 540:	d1 2c       	mov	r13, r1
 542:	e1 2c       	mov	r14, r1
 544:	f1 2c       	mov	r15, r1
 546:	00 e0       	ldi	r16, 0x00	; 0
 548:	10 e0       	ldi	r17, 0x00	; 0
 54a:	31 d0       	rcall	.+98     	; 0x5ae <__udivdi3>
 54c:	62 2f       	mov	r22, r18
 54e:	73 2f       	mov	r23, r19
 550:	84 2f       	mov	r24, r20
 552:	95 2f       	mov	r25, r21
 554:	1f 91       	pop	r17
 556:	0f 91       	pop	r16
 558:	ff 90       	pop	r15
 55a:	ef 90       	pop	r14
 55c:	df 90       	pop	r13
 55e:	cf 90       	pop	r12
 560:	bf 90       	pop	r11
 562:	af 90       	pop	r10
 564:	08 95       	ret

00000566 <time_delay_millis>:

void time_delay_millis(uint32_t delay) {
 566:	8f 92       	push	r8
 568:	9f 92       	push	r9
 56a:	af 92       	push	r10
 56c:	bf 92       	push	r11
 56e:	cf 92       	push	r12
 570:	df 92       	push	r13
 572:	ef 92       	push	r14
 574:	ff 92       	push	r15
 576:	4b 01       	movw	r8, r22
 578:	5c 01       	movw	r10, r24
	uint32_t start = time_get_millis();
 57a:	bf df       	rcall	.-130    	; 0x4fa <time_get_millis>
 57c:	6b 01       	movw	r12, r22
 57e:	7c 01       	movw	r14, r24
	while ( time_get_millis() - start < delay);
 580:	bc df       	rcall	.-136    	; 0x4fa <time_get_millis>
 582:	dc 01       	movw	r26, r24
 584:	cb 01       	movw	r24, r22
 586:	8c 19       	sub	r24, r12
 588:	9d 09       	sbc	r25, r13
 58a:	ae 09       	sbc	r26, r14
 58c:	bf 09       	sbc	r27, r15
 58e:	88 15       	cp	r24, r8
 590:	99 05       	cpc	r25, r9
 592:	aa 05       	cpc	r26, r10
 594:	bb 05       	cpc	r27, r11
 596:	a0 f3       	brcs	.-24     	; 0x580 <time_delay_millis+0x1a>
 598:	ff 90       	pop	r15
 59a:	ef 90       	pop	r14
 59c:	df 90       	pop	r13
 59e:	cf 90       	pop	r12
 5a0:	bf 90       	pop	r11
 5a2:	af 90       	pop	r10
 5a4:	9f 90       	pop	r9
 5a6:	8f 90       	pop	r8
 5a8:	08 95       	ret

000005aa <__umoddi3>:
 5aa:	68 94       	set
 5ac:	01 c0       	rjmp	.+2      	; 0x5b0 <__udivdi3_umoddi3>

000005ae <__udivdi3>:
 5ae:	e8 94       	clt

000005b0 <__udivdi3_umoddi3>:
 5b0:	8f 92       	push	r8
 5b2:	9f 92       	push	r9
 5b4:	cf 93       	push	r28
 5b6:	df 93       	push	r29
 5b8:	05 d0       	rcall	.+10     	; 0x5c4 <__udivmod64>
 5ba:	df 91       	pop	r29
 5bc:	cf 91       	pop	r28
 5be:	9f 90       	pop	r9
 5c0:	8f 90       	pop	r8
 5c2:	08 95       	ret

000005c4 <__udivmod64>:
 5c4:	88 24       	eor	r8, r8
 5c6:	99 24       	eor	r9, r9
 5c8:	f4 01       	movw	r30, r8
 5ca:	e4 01       	movw	r28, r8
 5cc:	b0 e4       	ldi	r27, 0x40	; 64
 5ce:	1b 2e       	mov	r1, r27
 5d0:	d4 01       	movw	r26, r8
 5d2:	9d 15       	cp	r25, r13
 5d4:	8e 04       	cpc	r8, r14
 5d6:	9f 04       	cpc	r9, r15
 5d8:	e0 07       	cpc	r30, r16
 5da:	f1 07       	cpc	r31, r17
 5dc:	38 f4       	brcc	.+14     	; 0x5ec <__udivmod64+0x28>
 5de:	fc 01       	movw	r30, r24
 5e0:	4b 01       	movw	r8, r22
 5e2:	ca 01       	movw	r24, r20
 5e4:	b9 01       	movw	r22, r18
 5e6:	ad 01       	movw	r20, r26
 5e8:	9e 01       	movw	r18, r28
 5ea:	16 94       	lsr	r1
 5ec:	22 0f       	add	r18, r18
 5ee:	33 1f       	adc	r19, r19
 5f0:	44 1f       	adc	r20, r20
 5f2:	55 1f       	adc	r21, r21
 5f4:	66 1f       	adc	r22, r22
 5f6:	77 1f       	adc	r23, r23
 5f8:	88 1f       	adc	r24, r24
 5fa:	99 1f       	adc	r25, r25
 5fc:	88 1c       	adc	r8, r8
 5fe:	99 1c       	adc	r9, r9
 600:	ee 1f       	adc	r30, r30
 602:	ff 1f       	adc	r31, r31
 604:	cc 1f       	adc	r28, r28
 606:	dd 1f       	adc	r29, r29
 608:	aa 1f       	adc	r26, r26
 60a:	bb 1f       	adc	r27, r27
 60c:	8a 14       	cp	r8, r10
 60e:	9b 04       	cpc	r9, r11
 610:	ec 05       	cpc	r30, r12
 612:	fd 05       	cpc	r31, r13
 614:	ce 05       	cpc	r28, r14
 616:	df 05       	cpc	r29, r15
 618:	a0 07       	cpc	r26, r16
 61a:	b1 07       	cpc	r27, r17
 61c:	48 f0       	brcs	.+18     	; 0x630 <__udivmod64+0x6c>
 61e:	8a 18       	sub	r8, r10
 620:	9b 08       	sbc	r9, r11
 622:	ec 09       	sbc	r30, r12
 624:	fd 09       	sbc	r31, r13
 626:	ce 09       	sbc	r28, r14
 628:	df 09       	sbc	r29, r15
 62a:	a0 0b       	sbc	r26, r16
 62c:	b1 0b       	sbc	r27, r17
 62e:	21 60       	ori	r18, 0x01	; 1
 630:	1a 94       	dec	r1
 632:	e1 f6       	brne	.-72     	; 0x5ec <__udivmod64+0x28>
 634:	2e f4       	brtc	.+10     	; 0x640 <__udivmod64+0x7c>
 636:	94 01       	movw	r18, r8
 638:	af 01       	movw	r20, r30
 63a:	be 01       	movw	r22, r28
 63c:	cd 01       	movw	r24, r26
 63e:	00 0c       	add	r0, r0
 640:	08 95       	ret

00000642 <__ashldi3>:
 642:	0f 93       	push	r16
 644:	08 30       	cpi	r16, 0x08	; 8
 646:	90 f0       	brcs	.+36     	; 0x66c <__ashldi3+0x2a>
 648:	98 2f       	mov	r25, r24
 64a:	87 2f       	mov	r24, r23
 64c:	76 2f       	mov	r23, r22
 64e:	65 2f       	mov	r22, r21
 650:	54 2f       	mov	r21, r20
 652:	43 2f       	mov	r20, r19
 654:	32 2f       	mov	r19, r18
 656:	22 27       	eor	r18, r18
 658:	08 50       	subi	r16, 0x08	; 8
 65a:	f4 cf       	rjmp	.-24     	; 0x644 <__ashldi3+0x2>
 65c:	22 0f       	add	r18, r18
 65e:	33 1f       	adc	r19, r19
 660:	44 1f       	adc	r20, r20
 662:	55 1f       	adc	r21, r21
 664:	66 1f       	adc	r22, r22
 666:	77 1f       	adc	r23, r23
 668:	88 1f       	adc	r24, r24
 66a:	99 1f       	adc	r25, r25
 66c:	0a 95       	dec	r16
 66e:	b2 f7       	brpl	.-20     	; 0x65c <__ashldi3+0x1a>
 670:	0f 91       	pop	r16
 672:	08 95       	ret

00000674 <__adddi3_s8>:
 674:	00 24       	eor	r0, r0
 676:	a7 fd       	sbrc	r26, 7
 678:	00 94       	com	r0
 67a:	2a 0f       	add	r18, r26
 67c:	30 1d       	adc	r19, r0
 67e:	40 1d       	adc	r20, r0
 680:	50 1d       	adc	r21, r0
 682:	60 1d       	adc	r22, r0
 684:	70 1d       	adc	r23, r0
 686:	80 1d       	adc	r24, r0
 688:	90 1d       	adc	r25, r0
 68a:	08 95       	ret

0000068c <_exit>:
 68c:	f8 94       	cli

0000068e <__stop_program>:
 68e:	ff cf       	rjmp	.-2      	; 0x68e <__stop_program>
